name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Format checking
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true

      - name: Check formatting
        run: cargo fmt --all -- --check

  # Linting with Clippy
  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Security audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Tests across Rust versions
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true

      - name: Run tests
        run: cargo test --all-features --verbose
        env:
          RUST_BACKTRACE: full

      - name: Run doc tests
        run: cargo test --doc --all-features

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage
        run: cargo tarpaulin --out Xml --all-features --timeout 120 --exclude-files tests/* --fail-under 60

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cobertura.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const xml = fs.readFileSync('./cobertura.xml', 'utf8');

            // Extract coverage percentage
            const match = xml.match(/line-rate="([0-9.]+)"/);
            const coverage = match ? (parseFloat(match[1]) * 100).toFixed(2) : 'N/A';

            const comment = `## üìä Code Coverage Report

            **Coverage:** ${coverage}%
            **Threshold:** 60%
            **Status:** ${parseFloat(coverage) >= 60 ? '‚úÖ Passing' : '‚ùå Below threshold'}

            View full report on [Codecov](https://codecov.io/gh/${{ github.repository }}/pull/${{ github.event.number }})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # All checks passed
  all-checks-pass:
    name: All Checks Pass
    runs-on: ubuntu-latest
    needs: [fmt, clippy, audit, test, coverage]
    if: always()
    steps:
      - name: Decide whether the needed jobs passed
        run: |
          if [[ "${{ needs.fmt.result }}" == "failure" ]]; then
            echo "‚ùå Format check failed"
            exit 1
          fi
          if [[ "${{ needs.clippy.result }}" == "failure" ]]; then
            echo "‚ùå Clippy check failed"
            exit 1
          fi
          if [[ "${{ needs.audit.result }}" == "failure" ]]; then
            echo "‚ùå Security audit failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "‚ùå Tests failed"
            exit 1
          fi
          if [[ "${{ needs.coverage.result }}" == "failure" ]]; then
            echo "‚ùå Coverage check failed"
            exit 1
          fi
          echo "‚úÖ All checks passed!"
